{{> header title="Session Tracker" subtitle="Run today’s plan, mark progress set-by-set, and capture how the workout actually went."}}

<main
  class="mx-auto mt-10 flex w-full max-w-5xl flex-col gap-8 px-6 pb-16"
  data-session-tracker
  data-mode="focus"
  data-session-state="idle"
  data-has-session="{{#if hasSession}}true{{else}}false{{/if}}"
  data-session-config='{{{json sessionConfig}}}'
>
  <section class="rounded-xl bg-white p-6 shadow-lg ring-1 ring-graphite/10 dark:bg-graphite dark:text-fog dark:ring-graphite/40">
    <header class="flex flex-col gap-4 lg:flex-row lg:items-start lg:justify-between">
      <div class="space-y-3">
        <div>
          <h2 class="text-lg font-semibold text-ink dark:text-white">Today&apos;s session</h2>
          <p class="text-sm text-graphite/70 dark:text-fog/70">{{sessionDateLabel}} · {{dayName}} · Week {{planWeekIndex}}</p>
        </div>
        <dl class="grid grid-cols-2 gap-4 text-sm text-graphite/80 dark:text-fog/80 sm:grid-cols-3">
          <div>
            <dt class="text-xs font-semibold uppercase tracking-wide text-graphite/60 dark:text-fog/60">Plan</dt>
            <dd>{{#if activePlan}}{{activePlan.name}}{{else}}No active plan{{/if}}</dd>
          </div>
          <div>
            <dt class="text-xs font-semibold uppercase tracking-wide text-graphite/60 dark:text-fog/60">Period</dt>
            <dd>{{#if activePlan}}{{capitalize activePlan.period}}{{else}}—{{/if}}</dd>
          </div>
          <div>
            <dt class="text-xs font-semibold uppercase tracking-wide text-graphite/60 dark:text-fog/60">Label</dt>
            <dd>{{#if activePlan}}{{#if activePlan.label}}{{activePlan.label}}{{else}}—{{/if}}{{else}}—{{/if}}</dd>
          </div>
        </dl>
        {{#if planError}}
          <p class="rounded-lg border border-orange/40 bg-orange/10 px-3 py-2 text-sm text-orange dark:border-orange/40 dark:bg-orange/10 dark:text-orange">{{planError}}</p>
        {{/if}}
        {{#if workoutError}}
          <p class="rounded-lg border border-orange/40 bg-orange/10 px-3 py-2 text-sm text-orange dark:border-orange/40 dark:bg-orange/10 dark:text-orange">{{workoutError}}</p>
        {{/if}}
      </div>
      <div class="flex flex-col gap-3 sm:flex-row sm:items-center">
        <button
          type="button"
          class="inline-flex items-center gap-2 rounded-lg bg-teal px-4 py-2 text-sm font-semibold text-white shadow-sm transition hover:bg-teal-dark focus:outline-none focus:ring-2 focus:ring-teal/40 disabled:cursor-not-allowed disabled:opacity-60 dark:bg-orange dark:hover:bg-orange-dark dark:focus:ring-orange/40"
          data-action="start-session"
          {{#unless hasSession}}disabled aria-disabled="true"{{/unless}}
        >
          Start workout
        </button>
        <button
          type="button"
          class="inline-flex items-center gap-2 rounded-lg border border-graphite/20 px-4 py-2 text-sm font-semibold text-graphite transition hover:border-graphite/40 hover:text-ink focus:outline-none focus:ring-2 focus:ring-graphite/30 disabled:cursor-not-allowed disabled:opacity-60 dark:border-fog/30 dark:text-fog dark:hover:border-fog/60 dark:hover:text-white dark:focus:ring-fog/30"
          data-action="end-session"
          disabled
          aria-disabled="true"
        >
          End workout
        </button>
      </div>
    </header>

    <div class="mt-6 space-y-4">
      <div class="flex flex-wrap items-center gap-3" role="group" aria-label="Session mode">
        <span class="text-xs font-semibold uppercase tracking-wide text-graphite/60 dark:text-fog/60">Mode</span>
        <button
          type="button"
          class="inline-flex items-center gap-2 rounded-full border border-teal/40 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-teal transition hover:bg-teal/10 focus:outline-none focus:ring-2 focus:ring-teal/40 aria-pressed:bg-teal aria-pressed:text-white dark:border-orange/40 dark:text-orange dark:hover:bg-orange/10 dark:aria-pressed:bg-orange dark:aria-pressed:text-ink"
          data-mode-option="focus"
          aria-pressed="true"
        >
          Focus Mode
        </button>
        <button
          type="button"
          class="inline-flex items-center gap-2 rounded-full border border-teal/20 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-graphite transition hover:border-teal/40 hover:text-teal focus:outline-none focus:ring-2 focus:ring-teal/40 aria-pressed:bg-teal aria-pressed:text-white dark:border-orange/25 dark:text-fog/70 dark:hover:border-orange/40 dark:hover:text-orange dark:aria-pressed:bg-orange dark:aria-pressed:text-ink"
          data-mode-option="circuit"
          aria-pressed="false"
        >
          Circuit Mode
        </button>
      </div>

      <div class="rounded-lg border border-graphite/10 bg-fog/60 p-4 text-sm text-graphite/80 dark:border-fog/20 dark:bg-graphite/60 dark:text-fog/80">
        <p data-mode-instructions="focus">Work through each exercise sequentially, completing all planned sets before moving on. Stay dialed in and update the table as you go.</p>
        <p data-mode-instructions="circuit" class="hidden">Move down the exercise list one set at a time. Complete the first round for every movement, rest, and repeat until all rounds are finished.</p>
        <div class="mt-4 flex flex-wrap gap-4 text-xs uppercase tracking-wide text-graphite/60 dark:text-fog/60">
          <span>Session status: <strong class="text-graphite dark:text-fog" data-session-status>Idle</strong></span>
          <span>Elapsed time: <strong class="text-graphite dark:text-fog" data-session-duration>00:00</strong></span>
        </div>
      </div>
    </div>
  </section>

  <section class="rounded-xl bg-white p-6 shadow-lg ring-1 ring-graphite/10 dark:bg-graphite dark:text-fog dark:ring-graphite/40">
    {{#if supabaseReady}}
      {{#if activePlan}}
        {{#if hasSession}}
          {{#each sessionWorkouts}}
            <article class="space-y-4 border-b border-graphite/10 pb-6 last:border-b-0 last:pb-0 dark:border-fog/20" data-workout>
              <header class="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <h3 class="text-base font-semibold text-ink dark:text-white">{{name}}</h3>
                  {{#if description}}
                    <p class="text-sm text-graphite/70 dark:text-fog/70">{{description}}</p>
                  {{/if}}
                </div>
                <div class="flex flex-wrap items-center gap-3 text-xs uppercase tracking-wide text-graphite/60 dark:text-fog/60">
                  {{#if rest_interval}}
                    <span>Rest: {{rest_interval}}</span>
                  {{/if}}
                  {{#if position}}
                    <span>Block #{{position}}</span>
                  {{/if}}
                </div>
              </header>

              {{#if exercises.length}}
                <div class="space-y-6" data-workout-body>
                  {{#each exercises}}
                    <div
                      class="space-y-4 rounded-lg border border-graphite/10 bg-fog/50 p-4 transition dark:border-fog/20 dark:bg-graphite/70"
                      data-exercise-row
                      data-exercise-id="{{id}}"
                    >
                      <div class="flex flex-col gap-2 sm:flex-row sm:items-start sm:justify-between">
                        <div class="space-y-1">
                          <h4 class="text-sm font-semibold text-ink dark:text-white">{{name}}</h4>
                          <p class="text-xs text-graphite/70 dark:text-fog/70">Target: {{target_sets}} × {{target_reps}} reps</p>
                          {{#if primary_muscle}}
                            <p class="text-xs text-graphite/60 dark:text-fog/60">Primary: {{primary_muscle}}</p>
                          {{/if}}
                        </div>
                        <span class="text-xs font-semibold uppercase tracking-wide text-graphite/60 dark:text-fog/60" data-sets-progress>{{target_sets}} sets pending</span>
                      </div>

                      <ul class="flex flex-wrap gap-3" data-set-list>
                        {{#each sets}}
                          <li class="flex flex-col gap-2 rounded-lg border border-graphite/10 bg-white p-3 text-xs text-graphite shadow-sm dark:border-fog/20 dark:bg-graphite/80 dark:text-fog" data-set-item>
                            <label class="flex items-center gap-2 text-sm font-semibold text-ink dark:text-white" for="exercise-{{../../id}}-set-{{index}}">
                              <input
                                type="checkbox"
                                id="exercise-{{../../id}}-set-{{index}}"
                                class="h-4 w-4 rounded border border-graphite/30 text-teal focus:ring-teal/40 dark:border-fog/40 dark:bg-graphite"
                                data-set-checkbox
                                data-set-index="{{index}}"
                              />
                              <span data-set-label data-set-index="{{index}}">Set {{index}}</span>
                            </label>
                            <div class="flex items-center gap-2 text-xs text-graphite/70 dark:text-fog/70">
                              <span class="rounded bg-fog/70 px-2 py-1 text-xs font-semibold uppercase tracking-wide text-graphite/70 dark:bg-graphite/60 dark:text-fog/70">Target: {{target_reps}} reps</span>
                              <input
                                type="number"
                                min="0"
                                inputmode="numeric"
                                placeholder="Actual reps"
                                class="w-24 rounded border border-graphite/20 px-2 py-1 text-xs text-graphite focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/40 dark:border-fog/30 dark:bg-graphite dark:text-fog"
                                data-set-actual
                              />
                            </div>
                          </li>
                        {{/each}}
                      </ul>

                      {{#if notes}}
                        <p class="rounded-lg border border-graphite/10 bg-white/60 px-3 py-2 text-xs text-graphite/70 dark:border-fog/20 dark:bg-graphite/60 dark:text-fog/70">Coach notes: {{notes}}</p>
                      {{/if}}
                    </div>
                  {{/each}}
                </div>
              {{else}}
                <p class="rounded-lg border border-graphite/10 bg-fog/50 px-3 py-2 text-sm text-graphite/70 dark:border-fog/20 dark:bg-graphite/70 dark:text-fog/70">This workout doesn&apos;t have any exercises yet. Add them in Manage Workouts to start tracking.</p>
              {{/if}}
            </article>
          {{/each}}
        {{else}}
          <p class="rounded-lg border border-graphite/10 bg-fog/60 px-4 py-3 text-sm text-graphite/70 dark:border-fog/20 dark:bg-graphite/60 dark:text-fog/70">Nothing scheduled for {{dayName}} of Week {{planWeekIndex}}. Enjoy the recovery or pick a workout manually when you&apos;re ready.</p>
        {{/if}}
      {{else}}
        <p class="rounded-lg border border-graphite/10 bg-fog/60 px-4 py-3 text-sm text-graphite/70 dark:border-fog/20 dark:bg-graphite/60 dark:text-fog/70">Activate a plan in <strong>Manage Plans</strong> to populate today&apos;s session automatically.</p>
      {{/if}}
    {{else}}
      <p class="rounded-lg border border-graphite/10 bg-fog/60 px-4 py-3 text-sm text-graphite/70 dark:border-fog/20 dark:bg-graphite/60 dark:text-fog/70">Connect Supabase to surface workouts from your plans and unlock live session tracking.</p>
    {{/if}}
  </section>
</main>

<script>
  (() => {
    const root = document.querySelector('[data-session-tracker]');
    if (!root) {
      return;
    }

    const parseConfig = () => {
      try {
        return JSON.parse(root.dataset.sessionConfig || '{}') || {};
      } catch (_error) {
        return {};
      }
    };

    const config = parseConfig();
    let currentMode = root.dataset.mode || 'focus';
    let timerId = null;
    let startTime = null;

    const startButton = root.querySelector('[data-action="start-session"]');
    const endButton = root.querySelector('[data-action="end-session"]');
    const statusLabel = root.querySelector('[data-session-status]');
    const durationLabel = root.querySelector('[data-session-duration]');
    const modeButtons = Array.from(root.querySelectorAll('[data-mode-option]'));
    const instructionBlocks = Array.from(root.querySelectorAll('[data-mode-instructions]'));

    const updateStatus = (state) => {
      root.dataset.sessionState = state;
      if (statusLabel) {
        const lookup = {
          idle: 'Idle',
          active: 'In progress',
          completed: 'Completed',
        };
        statusLabel.textContent = lookup[state] || 'Idle';
      }
    };

    const formatDuration = (elapsedMs) => {
      const totalSeconds = Math.max(Math.floor(elapsedMs / 1000), 0);
      const hours = Math.floor(totalSeconds / 3600);
      const minutes = Math.floor((totalSeconds % 3600) / 60);
      const seconds = totalSeconds % 60;

      const parts = [minutes, seconds].map((value) => String(value).padStart(2, '0'));
      if (hours > 0) {
        parts.unshift(String(hours));
      }
      return parts.join(':');
    };

    const refreshDuration = () => {
      if (!durationLabel || !startTime) {
        return;
      }
      const elapsed = Date.now() - startTime;
      durationLabel.textContent = formatDuration(elapsed);
    };

    const stopTimer = () => {
      if (timerId) {
        window.clearInterval(timerId);
        timerId = null;
      }
    };

    const updateMode = (mode) => {
      currentMode = mode;
      root.dataset.mode = mode;
      modeButtons.forEach((button) => {
        const isActive = button.dataset.modeOption === mode;
        button.setAttribute('aria-pressed', isActive ? 'true' : 'false');
      });
      instructionBlocks.forEach((block) => {
        block.classList.toggle('hidden', block.dataset.modeInstructions !== mode);
      });

      const setLabels = root.querySelectorAll('[data-set-label]');
      setLabels.forEach((label) => {
        const index = Number.parseInt(label.dataset.setIndex, 10);
        if (Number.isFinite(index) && index > 0) {
          label.textContent = mode === 'circuit' ? `Round ${index}` : `Set ${index}`;
        }
      });

      const exerciseRows = Array.from(root.querySelectorAll('[data-exercise-row]'));
      exerciseRows.forEach((row) => updateExerciseProgress(row));
    };

    const updateExerciseProgress = (row) => {
      if (!row) {
        return;
      }
      const checkboxes = Array.from(row.querySelectorAll('[data-set-checkbox]'));
      const completed = checkboxes.filter((checkbox) => checkbox.checked).length;
      const total = checkboxes.length;
      const progressLabel = row.querySelector('[data-sets-progress]');
      if (progressLabel && total > 0) {
        const unit = currentMode === 'circuit' ? 'rounds' : 'sets';
        progressLabel.textContent = `${completed}/${total} ${unit} complete`;
      }
      const finished = total > 0 && completed === total;
      row.classList.toggle('session-exercise-complete', finished);
      row.classList.toggle('ring-2', finished);
      row.classList.toggle('ring-teal/40', finished);
      row.classList.toggle('dark:ring-orange/40', finished);
      if (!finished) {
        row.classList.remove('ring-2', 'ring-teal/40', 'dark:ring-orange/40');
      }
    };

    const initializeProgress = () => {
      const rows = Array.from(root.querySelectorAll('[data-exercise-row]'));
      rows.forEach((row) => updateExerciseProgress(row));
    };

    const bindSetCheckboxes = () => {
      const checkboxes = Array.from(root.querySelectorAll('[data-set-checkbox]'));
      checkboxes.forEach((checkbox) => {
        checkbox.addEventListener('change', () => {
          const row = checkbox.closest('[data-exercise-row]');
          updateExerciseProgress(row);
        });
      });
    };

    if (startButton) {
      startButton.addEventListener('click', () => {
        if (root.dataset.sessionState === 'active') {
          return;
        }

        if (root.dataset.hasSession !== 'true') {
          return;
        }

        startTime = Date.now();
        updateStatus('active');
        refreshDuration();
        stopTimer();
        timerId = window.setInterval(refreshDuration, 1000);

        startButton.disabled = true;
        startButton.setAttribute('aria-disabled', 'true');
        endButton?.removeAttribute('disabled');
        endButton?.setAttribute('aria-disabled', 'false');
      });
    }

    if (endButton) {
      endButton.addEventListener('click', () => {
        if (root.dataset.sessionState !== 'active') {
          return;
        }

        stopTimer();
        refreshDuration();
        updateStatus('completed');
        endButton.disabled = true;
        endButton.setAttribute('aria-disabled', 'true');
        if (startButton) {
          startButton.disabled = false;
          startButton.setAttribute('aria-disabled', 'false');
          startButton.textContent = 'Restart workout';
        }
      });
    }

    modeButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const mode = button.dataset.modeOption || 'focus';
        updateMode(mode);
      });
    });

    updateStatus(root.dataset.sessionState || 'idle');
    updateMode(currentMode);
    bindSetCheckboxes();
    initializeProgress();

    // Expose configuration for potential future integrations (console friendly).
    window.gymTrackerSessionConfig = config;
  })();
</script>
