{{> header title="Session Tracker" subtitle="Run today’s plan, mark progress set-by-set, and capture how the workout actually went."}}

<main
  class="mx-auto mt-10 flex w-full max-w-5xl flex-col gap-8 px-6 pb-16"
  data-session-tracker
  data-mode="focus"
  data-session-state="idle"
  data-has-session="{{#if hasSession}}true{{else}}false{{/if}}"
  data-session-config='{{{json sessionConfig}}}'
>
  <section class="rounded-xl bg-white p-6 shadow-lg ring-1 ring-graphite/10 dark:bg-graphite dark:text-fog dark:ring-graphite/40">
    <header class="flex flex-col gap-4 lg:flex-row lg:items-start lg:justify-between">
      <div class="space-y-3">
        <div>
          <h2 class="text-lg font-semibold text-ink dark:text-white">Today&apos;s session</h2>
          <p class="text-sm text-graphite/70 dark:text-fog/70">{{sessionDateLabel}} · {{dayName}} · Week {{planWeekIndex}}</p>
        </div>
        <dl class="grid grid-cols-2 gap-4 text-sm text-graphite/80 dark:text-fog/80 sm:grid-cols-3">
          <div>
            <dt class="text-xs font-semibold uppercase tracking-wide text-graphite/60 dark:text-fog/60">Plan</dt>
            <dd>{{#if activePlan}}{{activePlan.name}}{{else}}No active plan{{/if}}</dd>
          </div>
          <div>
            <dt class="text-xs font-semibold uppercase tracking-wide text-graphite/60 dark:text-fog/60">Period</dt>
            <dd>{{#if activePlan}}{{capitalize activePlan.period}}{{else}}—{{/if}}</dd>
          </div>
          <div>
            <dt class="text-xs font-semibold uppercase tracking-wide text-graphite/60 dark:text-fog/60">Label</dt>
            <dd>{{#if activePlan}}{{#if activePlan.label}}{{activePlan.label}}{{else}}—{{/if}}{{else}}—{{/if}}</dd>
          </div>
        </dl>
        {{#if planError}}
          <p class="rounded-lg border border-orange/40 bg-orange/10 px-3 py-2 text-sm text-orange dark:border-orange/40 dark:bg-orange/10 dark:text-orange">{{planError}}</p>
        {{/if}}
        {{#if workoutError}}
          <p class="rounded-lg border border-orange/40 bg-orange/10 px-3 py-2 text-sm text-orange dark:border-orange/40 dark:bg-orange/10 dark:text-orange">{{workoutError}}</p>
        {{/if}}
      </div>
      <div class="flex flex-col gap-3 sm:flex-row sm:items-center">
        <button
          type="button"
          class="inline-flex items-center gap-2 rounded-lg bg-teal px-4 py-2 text-sm font-semibold text-white shadow-sm transition hover:bg-teal-dark focus:outline-none focus:ring-2 focus:ring-teal/40 disabled:cursor-not-allowed disabled:opacity-60 dark:bg-orange dark:hover:bg-orange-dark dark:focus:ring-orange/40"
          data-action="start-session"
          {{#unless hasSession}}disabled aria-disabled="true"{{/unless}}
        >
          Start workout
        </button>
        <button
          type="button"
          class="inline-flex items-center gap-2 rounded-lg border border-graphite/20 px-4 py-2 text-sm font-semibold text-graphite transition hover:border-graphite/40 hover:text-ink focus:outline-none focus:ring-2 focus:ring-graphite/30 disabled:cursor-not-allowed disabled:opacity-60 dark:border-fog/30 dark:text-fog dark:hover:border-fog/60 dark:hover:text-white dark:focus:ring-fog/30"
          data-action="end-session"
          disabled
          aria-disabled="true"
        >
          End workout
        </button>
      </div>
    </header>

    <div class="mt-6 space-y-4">
      <div class="flex flex-wrap items-center gap-3" role="group" aria-label="Session mode">
        <span class="text-xs font-semibold uppercase tracking-wide text-graphite/60 dark:text-fog/60">Mode</span>
        <button
          type="button"
          class="inline-flex items-center gap-2 rounded-full border border-teal/40 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-teal transition hover:bg-teal/10 focus:outline-none focus:ring-2 focus:ring-teal/40 aria-pressed:bg-teal aria-pressed:text-white dark:border-orange/40 dark:text-orange dark:hover:bg-orange/10 dark:aria-pressed:bg-orange dark:aria-pressed:text-ink"
          data-mode-option="focus"
          aria-pressed="true"
        >
          Focus Mode
        </button>
        <button
          type="button"
          class="inline-flex items-center gap-2 rounded-full border border-teal/20 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-graphite transition hover:border-teal/40 hover:text-teal focus:outline-none focus:ring-2 focus:ring-teal/40 aria-pressed:bg-teal aria-pressed:text-white dark:border-orange/25 dark:text-fog/70 dark:hover:border-orange/40 dark:hover:text-orange dark:aria-pressed:bg-orange dark:aria-pressed:text-ink"
          data-mode-option="circuit"
          aria-pressed="false"
        >
          Circuit Mode
        </button>
      </div>

      <div class="rounded-lg border border-graphite/10 bg-fog/60 p-4 text-sm text-graphite/80 dark:border-fog/20 dark:bg-graphite/60 dark:text-fog/80">
        <p data-mode-instructions="focus">Work through each exercise sequentially, completing all planned sets before moving on. Stay dialed in and update the table as you go.</p>
        <p data-mode-instructions="circuit" class="hidden">Move down the exercise list one set at a time. Complete the first round for every movement, rest, and repeat until all rounds are finished.</p>
        <div data-session-message class="mt-3 hidden rounded-lg border border-teal/30 bg-teal/10 px-3 py-2 text-xs text-teal-dark transition dark:border-orange/40 dark:bg-orange/10 dark:text-orange"></div>
        <div class="mt-4 flex flex-wrap gap-4 text-xs uppercase tracking-wide text-graphite/60 dark:text-fog/60">
          <span>Session status: <strong class="text-graphite dark:text-fog" data-session-status>Idle</strong></span>
          <span>Elapsed time: <strong class="text-graphite dark:text-fog" data-session-duration>00:00</strong></span>
        </div>
      </div>
    </div>
  </section>

  <section class="rounded-xl bg-white p-6 shadow-lg ring-1 ring-graphite/10 dark:bg-graphite dark:text-fog dark:ring-graphite/40">
    {{#if supabaseReady}}
      {{#if activePlan}}
        {{#if hasSession}}
          {{#each sessionWorkouts}}
            <article class="space-y-4 border-b border-graphite/10 pb-6 last:border-b-0 last:pb-0 dark:border-fog/20" data-workout>
              <header class="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
                <div>
                  <h3 class="text-base font-semibold text-ink dark:text-white">{{name}}</h3>
                  {{#if description}}
                    <p class="text-sm text-graphite/70 dark:text-fog/70">{{description}}</p>
                  {{/if}}
                </div>
                <div class="flex flex-wrap items-center gap-3 text-xs uppercase tracking-wide text-graphite/60 dark:text-fog/60">
                  {{#if rest_interval}}
                    <span>Rest: {{rest_interval}}</span>
                  {{/if}}
                  {{#if position}}
                    <span>Block #{{position}}</span>
                  {{/if}}
                </div>
              </header>

              {{#if exercises.length}}
                <div class="space-y-6" data-workout-body>
                  {{#each exercises}}
                    <div
                      class="space-y-4 rounded-lg border border-graphite/10 bg-fog/50 p-4 transition dark:border-fog/20 dark:bg-graphite/70"
                      data-exercise-row
                      data-exercise-id="{{id}}"
                    >
                      <div class="flex flex-col gap-2 sm:flex-row sm:items-start sm:justify-between">
                        <div class="space-y-1">
                          <h4 class="text-sm font-semibold text-ink dark:text-white">{{name}}</h4>
                          <p class="text-xs text-graphite/70 dark:text-fog/70">Target: {{target_sets}} × {{target_reps}} reps</p>
                          {{#if primary_muscle}}
                            <p class="text-xs text-graphite/60 dark:text-fog/60">Primary: {{primary_muscle}}</p>
                          {{/if}}
                        </div>
                        <span class="text-xs font-semibold uppercase tracking-wide text-graphite/60 dark:text-fog/60" data-sets-progress>{{target_sets}} sets pending</span>
                      </div>

                      <ul class="flex flex-wrap gap-3" data-set-list>
                        {{#each sets}}
                          <li class="flex flex-col gap-2 rounded-lg border border-graphite/10 bg-white p-3 text-xs text-graphite shadow-sm dark:border-fog/20 dark:bg-graphite/80 dark:text-fog" data-set-item>
                            <label class="flex items-center gap-2 text-sm font-semibold text-ink dark:text-white" for="exercise-{{../../id}}-set-{{index}}">
                              <input
                                type="checkbox"
                                id="exercise-{{../../id}}-set-{{index}}"
                                class="h-4 w-4 rounded border border-graphite/30 text-teal focus:ring-teal/40 dark:border-fog/40 dark:bg-graphite"
                                data-set-checkbox
                                data-set-index="{{index}}"
                              />
                              <span data-set-label data-set-index="{{index}}">Set {{index}}</span>
                            </label>
                            <div class="flex items-center gap-2 text-xs text-graphite/70 dark:text-fog/70">
                              <span class="rounded bg-fog/70 px-2 py-1 text-xs font-semibold uppercase tracking-wide text-graphite/70 dark:bg-graphite/60 dark:text-fog/70">Target: {{target_reps}} reps</span>
                              <input
                                type="number"
                                min="0"
                                inputmode="numeric"
                                placeholder="Actual reps"
                                class="w-24 rounded border border-graphite/20 px-2 py-1 text-xs text-graphite focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/40 dark:border-fog/30 dark:bg-graphite dark:text-fog"
                                data-set-actual
                              />
                            </div>
                          </li>
                        {{/each}}
                      </ul>

                      {{#if notes}}
                        <p class="rounded-lg border border-graphite/10 bg-white/60 px-3 py-2 text-xs text-graphite/70 dark:border-fog/20 dark:bg-graphite/60 dark:text-fog/70">Coach notes: {{notes}}</p>
                      {{/if}}
                    </div>
                  {{/each}}
                </div>
              {{else}}
                <p class="rounded-lg border border-graphite/10 bg-fog/50 px-3 py-2 text-sm text-graphite/70 dark:border-fog/20 dark:bg-graphite/70 dark:text-fog/70">This workout doesn&apos;t have any exercises yet. Add them in Manage Workouts to start tracking.</p>
              {{/if}}
            </article>
          {{/each}}
        {{else}}
          <p class="rounded-lg border border-graphite/10 bg-fog/60 px-4 py-3 text-sm text-graphite/70 dark:border-fog/20 dark:bg-graphite/60 dark:text-fog/70">Nothing scheduled for {{dayName}} of Week {{planWeekIndex}}. Enjoy the recovery or pick a workout manually when you&apos;re ready.</p>
        {{/if}}
      {{else}}
        <p class="rounded-lg border border-graphite/10 bg-fog/60 px-4 py-3 text-sm text-graphite/70 dark:border-fog/20 dark:bg-graphite/60 dark:text-fog/70">Activate a plan in <strong>Manage Plans</strong> to populate today&apos;s session automatically.</p>
      {{/if}}
    {{else}}
      <p class="rounded-lg border border-graphite/10 bg-fog/60 px-4 py-3 text-sm text-graphite/70 dark:border-fog/20 dark:bg-graphite/60 dark:text-fog/70">Connect Supabase to surface workouts from your plans and unlock live session tracking.</p>
    {{/if}}
  </section>
</main>

<script>
  (() => {
    const root = document.querySelector('[data-session-tracker]');
    if (!root) {
      return;
    }

    const parseConfig = () => {
      try {
        return JSON.parse(root.dataset.sessionConfig || '{}') || {};
      } catch (_error) {
        return {};
      }
    };

    const config = parseConfig();
    const sessionState = {
      id: null,
      sets: [],
      startTimestamp: null,
    };
    let currentMode = root.dataset.mode || 'focus';
    let timerId = null;
    let startTime = null;

    const startButton = root.querySelector('[data-action="start-session"]');
    const endButton = root.querySelector('[data-action="end-session"]');
    const statusLabel = root.querySelector('[data-session-status]');
    const durationLabel = root.querySelector('[data-session-duration]');
    const modeButtons = Array.from(root.querySelectorAll('[data-mode-option]'));
    const instructionBlocks = Array.from(root.querySelectorAll('[data-mode-instructions]'));
    const messageArea = root.querySelector('[data-session-message]');
    const startButtonDefaultLabel = startButton ? startButton.textContent : 'Start workout';

    const messageStyles = {
      info: ['border-teal/30', 'bg-teal/10', 'text-teal-dark', 'dark:border-orange/40', 'dark:bg-orange/10', 'dark:text-orange'],
      success: ['border-teal/40', 'bg-teal/10', 'text-teal-dark', 'dark:border-orange/40', 'dark:bg-orange/10', 'dark:text-orange'],
      error: ['border-red-300', 'bg-red-50', 'text-red-700', 'dark:border-orange/60', 'dark:bg-orange/10', 'dark:text-orange'],
    };

    const setMessage = (text, type = 'info') => {
      if (!messageArea) {
        return;
      }

      const variants = new Set([...messageStyles.info, ...messageStyles.success, ...messageStyles.error]);
      variants.forEach((cls) => messageArea.classList.remove(cls));

      const style = messageStyles[type] || messageStyles.info;
      style.forEach((cls) => messageArea.classList.add(cls));

      messageArea.textContent = text;
      messageArea.classList.remove('hidden');
    };

    const clearMessage = () => {
      if (!messageArea) {
        return;
      }

      messageArea.textContent = '';
      messageArea.classList.add('hidden');
    };

    const updateStatus = (state) => {
      root.dataset.sessionState = state;
      if (statusLabel) {
        const lookup = {
          idle: 'Idle',
          active: 'In progress',
          completed: 'Completed',
        };
        statusLabel.textContent = lookup[state] || 'Idle';
      }
    };

    const formatDuration = (elapsedMs) => {
      const totalSeconds = Math.max(Math.floor(elapsedMs / 1000), 0);
      const hours = Math.floor(totalSeconds / 3600);
      const minutes = Math.floor((totalSeconds % 3600) / 60);
      const seconds = totalSeconds % 60;

      const parts = [minutes, seconds].map((value) => String(value).padStart(2, '0'));
      if (hours > 0) {
        parts.unshift(String(hours));
      }
      return parts.join(':');
    };

    const refreshDuration = () => {
      if (!durationLabel || !startTime) {
        return;
      }
      const elapsed = Date.now() - startTime;
      durationLabel.textContent = formatDuration(elapsed);
    };

    const stopTimer = () => {
      if (timerId) {
        window.clearInterval(timerId);
        timerId = null;
      }
      startTime = null;
      sessionState.startTimestamp = null;
    };

    const updateMode = (mode) => {
      currentMode = mode;
      root.dataset.mode = mode;
      modeButtons.forEach((button) => {
        const isActive = button.dataset.modeOption === mode;
        button.setAttribute('aria-pressed', isActive ? 'true' : 'false');
      });
      instructionBlocks.forEach((block) => {
        block.classList.toggle('hidden', block.dataset.modeInstructions !== mode);
      });

      const setLabels = root.querySelectorAll('[data-set-label]');
      setLabels.forEach((label) => {
        const index = Number.parseInt(label.dataset.setIndex, 10);
        if (Number.isFinite(index) && index > 0) {
          label.textContent = mode === 'circuit' ? `Round ${index}` : `Set ${index}`;
        }
      });

      const exerciseRows = Array.from(root.querySelectorAll('[data-exercise-row]'));
      exerciseRows.forEach((row) => updateExerciseProgress(row));
    };

    const updateExerciseProgress = (row) => {
      if (!row) {
        return;
      }
      const checkboxes = Array.from(row.querySelectorAll('[data-set-checkbox]'));
      const completed = checkboxes.filter((checkbox) => checkbox.checked).length;
      const total = checkboxes.length;
      const progressLabel = row.querySelector('[data-sets-progress]');
      if (progressLabel && total > 0) {
        const unit = currentMode === 'circuit' ? 'rounds' : 'sets';
        progressLabel.textContent = `${completed}/${total} ${unit} complete`;
      }
      const finished = total > 0 && completed === total;
      row.classList.toggle('session-exercise-complete', finished);
      row.classList.toggle('ring-2', finished);
      row.classList.toggle('ring-teal/40', finished);
      row.classList.toggle('dark:ring-orange/40', finished);
      if (!finished) {
        row.classList.remove('ring-2', 'ring-teal/40', 'dark:ring-orange/40');
      }
    };

    const initializeProgress = () => {
      const rows = Array.from(root.querySelectorAll('[data-exercise-row]'));
      rows.forEach((row) => updateExerciseProgress(row));
    };

    const bindSetCheckboxes = () => {
      const checkboxes = Array.from(root.querySelectorAll('[data-set-checkbox]'));
      checkboxes.forEach((checkbox) => {
        checkbox.addEventListener('change', () => {
          const row = checkbox.closest('[data-exercise-row]');
          updateExerciseProgress(row);
        });
      });
    };

    const applySessionSets = (sets = []) => {
      const setItems = Array.from(root.querySelectorAll('[data-set-item]'));

      setItems.forEach((item) => {
        delete item.dataset.setId;
        const checkbox = item.querySelector('[data-set-checkbox]');
        if (checkbox) {
          delete checkbox.dataset.setId;
          checkbox.checked = false;
          checkbox.disabled = false;
        }

        const input = item.querySelector('[data-set-actual]');
        if (input) {
          input.disabled = false;
          input.value = '';
        }
      });

      if (!Array.isArray(sets) || !sets.length) {
        initializeProgress();
        return;
      }

      setItems.forEach((item, index) => {
        const setData = sets[index];
        if (!setData || !setData.id) {
          return;
        }

        item.dataset.setId = setData.id;

        const checkbox = item.querySelector('[data-set-checkbox]');
        if (checkbox) {
          checkbox.dataset.setId = setData.id;
          checkbox.checked = Boolean(setData.completed);
          checkbox.disabled = false;
        }

        const input = item.querySelector('[data-set-actual]');
        if (input) {
          input.disabled = false;
          if (Number.isFinite(setData.actual_reps)) {
            input.value = setData.actual_reps;
          } else {
            input.value = '';
          }
        }
      });

      initializeProgress();
    };

    const collectSetPayloads = () => {
      const setItems = Array.from(root.querySelectorAll('[data-set-item]'));

      return setItems
        .map((item) => {
          const setId = item.dataset.setId;
          if (!setId) {
            return null;
          }

          const checkbox = item.querySelector('[data-set-checkbox]');
          const input = item.querySelector('[data-set-actual]');

          let actual = null;
          if (input && typeof input.value === 'string' && input.value.trim().length) {
            const parsed = Number.parseInt(input.value.trim(), 10);
            if (Number.isFinite(parsed) && parsed >= 0) {
              actual = parsed;
            }
          }

          return {
            id: setId,
            completed: checkbox ? checkbox.checked : false,
            actual_reps: actual,
            notes: '',
          };
        })
        .filter(Boolean);
    };

    const buildSessionRequestBody = () => {
      const workouts = Array.isArray(config.workouts) ? config.workouts : [];

      return {
        plan_id: config.planId,
        plan_name: config.planName,
        day_index: config.dayIndex,
        week_index: config.weekIndex,
        mode: currentMode,
        workouts: workouts.map((workout, workoutIndex) => {
          const exercises = Array.isArray(workout.exercises) ? workout.exercises : [];
          return {
            id: workout.id || null,
            name: typeof workout.name === 'string' ? workout.name : `Workout ${workoutIndex + 1}`,
            position: Number.isFinite(workout.position) ? workout.position : workoutIndex + 1,
            exercises: exercises.map((exercise, exerciseIndex) => {
              const sets = Array.isArray(exercise.sets) && exercise.sets.length
                ? exercise.sets
                : Array.from({ length: Number.isFinite(exercise.target_sets) ? exercise.target_sets : 1 }, (_, idx) => ({
                    index: idx + 1,
                    target_reps: Number.isFinite(exercise.target_reps) ? exercise.target_reps : null,
                  }));

              return {
                id: exercise.id || null,
                name: typeof exercise.name === 'string' ? exercise.name : `Exercise ${exerciseIndex + 1}`,
                target_sets: exercise.target_sets,
                target_reps: exercise.target_reps,
                sets: sets.map((set, setIndex) => ({
                  index: Number.isFinite(set.index) ? set.index : setIndex + 1,
                  target_reps:
                    Number.isFinite(set.target_reps) ? set.target_reps : Number.isFinite(exercise.target_reps) ? exercise.target_reps : null,
                })),
              };
            }),
          };
        }),
      };
    };

    const parseErrorResponse = async (response) => {
      try {
        const data = await response.json();
        if (data && data.error) {
          return data.error;
        }
      } catch (_error) {
        // ignore JSON parse errors
      }

      return response.statusText || 'Request failed';
    };

    if (startButton) {
      startButton.addEventListener('click', async () => {
        if (root.dataset.sessionState === 'active') {
          return;
        }

        if (root.dataset.hasSession !== 'true') {
          setMessage('Assign workouts to your plan before starting a session.', 'error');
          return;
        }

        clearMessage();
        setMessage('Starting session…', 'info');

        stopTimer();

        startButton.disabled = true;
        startButton.setAttribute('aria-disabled', 'true');

        try {
          const response = await fetch('/sessions', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(buildSessionRequestBody()),
          });

          if (!response.ok) {
            const errorMessage = await parseErrorResponse(response);
            throw new Error(errorMessage);
          }

          const data = await response.json();
          sessionState.id = data && data.session ? data.session.id : null;
          sessionState.sets = Array.isArray(data && data.sets) ? data.sets : [];
          applySessionSets(sessionState.sets);
          root.dataset.sessionId = sessionState.id || '';

          sessionState.startTimestamp = Date.now();
          startTime = sessionState.startTimestamp;
          updateStatus('active');
          refreshDuration();
          timerId = window.setInterval(refreshDuration, 1000);

          startButton.textContent = 'Session in progress';
          endButton?.removeAttribute('disabled');
          endButton?.setAttribute('aria-disabled', 'false');

          setMessage('Session started. Track your sets as you go!', 'success');
        } catch (error) {
          console.error('Failed to start session', error);
          setMessage(error.message || 'Unable to start the session. Please try again.', 'error');
          startButton.disabled = false;
          startButton.setAttribute('aria-disabled', 'false');
          startButton.textContent = startButtonDefaultLabel;
        }
      });
    }

    if (endButton) {
      endButton.addEventListener('click', async () => {
        if (root.dataset.sessionState !== 'active') {
          setMessage('Start the session before ending it.', 'error');
          return;
        }

        if (!sessionState.id) {
          setMessage('No active session found. Try starting again.', 'error');
          return;
        }

        clearMessage();
        setMessage('Saving session…', 'info');

        endButton.disabled = true;
        endButton.setAttribute('aria-disabled', 'true');

        const now = Date.now();
        const durationSeconds = sessionState.startTimestamp
          ? Math.max(Math.floor((now - sessionState.startTimestamp) / 1000), 0)
          : null;

        const payload = {
          duration_seconds: durationSeconds,
          ended_at: new Date(now).toISOString(),
          sets: collectSetPayloads(),
        };

        try {
          const response = await fetch(`/sessions/${encodeURIComponent(sessionState.id)}/complete`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
          });

          if (!response.ok) {
            const errorMessage = await parseErrorResponse(response);
            throw new Error(errorMessage);
          }

          updateStatus('completed');
          stopTimer();
          refreshDuration();

          const checkboxes = Array.from(root.querySelectorAll('[data-set-checkbox]'));
          checkboxes.forEach((checkbox) => {
            checkbox.disabled = true;
          });

          const inputs = Array.from(root.querySelectorAll('[data-set-actual]'));
          inputs.forEach((input) => {
            input.disabled = true;
          });

          setMessage('Session saved. Great work!', 'success');

          endButton.disabled = true;
          endButton.setAttribute('aria-disabled', 'true');

          if (startButton) {
            startButton.disabled = false;
            startButton.setAttribute('aria-disabled', 'false');
            startButton.textContent = 'Restart workout';
          }

          sessionState.id = null;
          sessionState.sets = [];
          root.dataset.sessionId = '';
        } catch (error) {
          console.error('Failed to complete session', error);
          setMessage(error.message || 'Unable to save the session. Please try again.', 'error');
          endButton.disabled = false;
          endButton.setAttribute('aria-disabled', 'false');
        }
      });
    }

    modeButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const mode = button.dataset.modeOption || 'focus';
        updateMode(mode);
      });
    });

    updateStatus(root.dataset.sessionState || 'idle');
    updateMode(currentMode);
    bindSetCheckboxes();
    initializeProgress();

    // Expose configuration for potential future integrations (console friendly).
    window.gymTrackerSessionConfig = config;
  })();
</script>
