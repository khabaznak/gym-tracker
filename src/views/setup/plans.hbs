{{> header title="Manage Plans" subtitle="Coordinate workouts across weekly, bi-weekly, or monthly schedules."}}

<main class="mx-auto mt-10 flex w-full max-w-5xl flex-col gap-8 px-6 pb-16">
  <section class="rounded-xl bg-white p-6 shadow-lg ring-1 ring-graphite/10 dark:bg-graphite dark:text-fog dark:ring-graphite/40">
    <div class="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
      <div>
        <h2 class="text-lg font-semibold text-ink dark:text-white">Training plans</h2>
        <p class="mt-1 text-sm text-graphite/70 dark:text-fog/70">Bundle workouts into recurring schedules and flag the plans athletes should follow.</p>
      </div>
      <button
        type="button"
        id="new-plan-button"
        class="inline-flex items-center gap-2 rounded-lg bg-teal px-4 py-2 text-sm font-semibold text-white shadow-sm transition hover:bg-teal-dark focus:outline-none focus:ring-2 focus:ring-teal/40 disabled:cursor-not-allowed disabled:opacity-60 dark:bg-orange dark:hover:bg-orange-dark dark:focus:ring-orange/40"
        {{#unless supabaseReady}}disabled aria-disabled="true"{{/unless}}
      >
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" class="h-5 w-5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
        </svg>
        New plan
      </button>
    </div>

    <div id="plan-form-messages" class="mt-6 text-sm text-graphite/70 dark:text-fog/70" role="status"></div>

    <div id="new-plan-form-container" class="mt-6 hidden" aria-hidden="true">
      <form
        id="new-plan-form"
        class="space-y-4 rounded-lg border border-graphite/10 bg-fog/60 p-4 shadow-sm dark:border-fog/15 dark:bg-graphite/60"
        hx-post="/plans"
        hx-target="#plan-form-messages"
        hx-swap="innerHTML"
        hx-on="htmx:afterSwap: if (event.detail.xhr.status === 201) { this.reset(); this.dataset.initialAssignments='[]'; document.dispatchEvent(new CustomEvent('plan-form:saved')); }"
        data-plan-form
        data-workouts='{{{json workouts}}}'
        data-initial-assignments='[]'
      >
        <fieldset class="grid gap-4 md:grid-cols-2" {{#unless supabaseReady}}disabled{{/unless}}>
          <div class="flex flex-col gap-2">
            <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="plan-name">Plan name<span class="text-orange">*</span></label>
            <input
              id="plan-name"
              name="name"
              type="text"
              placeholder="Push/Pull Hybrid"
              required
              class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:placeholder:text-fog/50 dark:focus:border-teal dark:focus:ring-teal/40"
            />
          </div>
          <div class="flex flex-col gap-2">
            <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="plan-period">Period<span class="text-orange">*</span></label>
            <select
              id="plan-period"
              name="period"
              class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:focus:border-teal dark:focus:ring-teal/40"
            >
              <option value="weekly">Weekly</option>
              <option value="bi-weekly">Bi-weekly</option>
              <option value="monthly">Monthly</option>
            </select>
          </div>
          <div class="flex flex-col gap-2">
            <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="plan-status">Status</label>
            <select
              id="plan-status"
              name="status"
              class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:focus:border-teal dark:focus:ring-teal/40"
            >
              <option value="active">Active</option>
              <option value="inactive" selected>Inactive</option>
            </select>
          </div>
          <div class="md:col-span-1 flex flex-col gap-2">
            <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="plan-label">Label (optional)</label>
            <input
              id="plan-label"
              name="label"
              type="text"
              placeholder="Spring block"
              class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:placeholder:text-fog/50 dark:focus:border-teal dark:focus:ring-teal/40"
            />
          </div>
          <div class="md:col-span-2 flex flex-col gap-2">
            <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="plan-description">Description</label>
            <textarea
              id="plan-description"
              name="description"
              rows="3"
              placeholder="Outline the focus for each week and which athletes this plan supports."
              class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:placeholder:text-fog/50 dark:focus:border-teal dark:focus:ring-teal/40"
            ></textarea>
          </div>
        </fieldset>

        <div class="space-y-4" data-plan-schedule>
          <div class="flex items-center justify-between">
            <h3 class="text-sm font-semibold uppercase tracking-wide text-graphite/60 dark:text-fog/60">Schedule</h3>
            <button
              type="button"
              data-action="add-assignment"
              class="inline-flex items-center gap-2 rounded-lg border border-graphite/20 px-3 py-1.5 text-xs font-semibold uppercase tracking-wide text-graphite transition hover:border-graphite/40 hover:text-ink focus:outline-none focus:ring-2 focus:ring-graphite/30 dark:border-fog/30 dark:text-fog dark:hover:border-fog/60 dark:hover:text-white dark:focus:ring-fog/30"
            >
              Add assignment
            </button>
          </div>
          <div class="flex flex-col gap-3" data-plan-assignments></div>
        </div>

        <div class="flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
          <div class="flex items-center gap-3">
            <button
              type="submit"
              class="inline-flex items-center gap-2 rounded-lg bg-teal px-4 py-2 text-sm font-semibold text-white shadow-sm transition hover:bg-teal-dark focus:outline-none focus:ring-2 focus:ring-teal/40 dark:bg-orange dark:hover:bg-orange-dark dark:focus:ring-orange/40"
              {{#unless supabaseReady}}disabled{{/unless}}
            >
              Save plan
            </button>
            <button
              type="button"
              data-action="cancel-plan"
              class="inline-flex items-center gap-2 rounded-lg border border-graphite/20 px-4 py-2 text-sm font-semibold text-graphite transition hover:border-graphite/40 hover:text-ink focus:outline-none focus:ring-2 focus:ring-graphite/30 dark:border-fog/30 dark:text-fog dark:hover:border-fog/60 dark:hover:text-white dark:focus:ring-fog/30"
            >
              Cancel
            </button>
            <span class="htmx-indicator text-sm text-graphite/70 dark:text-fog/70">Saving…</span>
          </div>
        </div>
      </form>
    </div>

    <div class="mt-8 space-y-3">
      <div class="flex items-center justify-between">
        <h3 class="text-sm font-semibold uppercase tracking-wide text-graphite/70 dark:text-fog/60">Plan Library</h3>
        <button
          type="button"
          class="text-sm font-semibold text-teal hover:text-teal-dark dark:text-orange dark:hover:text-orange-dark"
          hx-get="/plans/fragment?mode=manage"
          hx-target="#plan-library"
          hx-swap="innerHTML"
          {{#unless supabaseReady}}disabled{{/unless}}
        >
          Refresh
        </button>
      </div>
      <div
        class="space-y-3"
        id="plan-library"
        {{#if supabaseReady}}
          hx-get="/plans/fragment?mode=manage"
          hx-trigger="load"
          hx-swap="innerHTML"
        {{/if}}
      >
        {{> plans/list plans=plans supabaseReady=supabaseReady manageable=true}}
      </div>
    </div>
  </section>

  <section class="rounded-xl border border-dashed border-graphite/20 bg-white/40 p-6 text-sm text-graphite/70 dark:border-fog/30 dark:bg-graphite/50 dark:text-fog/70">
    {{#if supabaseReady}}
      <p>Plans coordinate workouts across weeks. Use them to prescribe ongoing routines, then toggle status as you rotate training blocks.</p>
    {{else}}
      <p>Connect Supabase to start building periodized training plans. Once configured, assign workouts to days and activate the plan when it’s ready.</p>
    {{/if}}
  </section>
</main>

<div
  id="plan-delete-modal"
  class="fixed inset-0 z-50 hidden flex items-center justify-center bg-black/50 px-4 py-6"
  role="dialog"
  aria-modal="true"
  aria-labelledby="plan-delete-title"
  aria-hidden="true"
>
  <div class="w-full max-w-md rounded-xl bg-white p-6 shadow-2xl ring-1 ring-black/10 dark:bg-graphite dark:text-fog dark:ring-white/10">
    <div class="space-y-4">
      <header class="space-y-2">
        <h2 id="plan-delete-title" class="text-lg font-semibold text-ink dark:text-white">Delete plan</h2>
        <p class="text-sm text-graphite/80 dark:text-fog/80">
          You’re about to delete this plan and its schedule. This can’t be undone.
        </p>
        <p id="plan-delete-name" class="text-sm font-semibold text-ink dark:text-white"></p>
      </header>
      <div
        id="plan-delete-error"
        class="hidden rounded-lg border border-red-200 bg-red-50 p-3 text-sm text-red-700 dark:border-orange/40 dark:bg-orange/10 dark:text-orange"
        role="alert"
      ></div>
      <form id="plan-delete-form" class="flex flex-col gap-3">
        <div class="flex flex-wrap justify-end gap-3">
          <button
            type="submit"
            data-role="confirm-delete"
            class="inline-flex items-center gap-2 rounded-lg border border-red-300 px-4 py-2 text-sm font-semibold text-red-600 transition hover:border-red-400 hover:text-red-700 focus:outline-none focus:ring-2 focus:ring-red-200 disabled:cursor-not-allowed disabled:opacity-60 dark:border-orange/50 dark:text-orange dark:hover:border-orange dark:hover:text-orange/80 dark:focus:ring-orange/40"
          >
            Confirm delete
          </button>
          <button
            type="button"
            data-action="close-delete"
            class="inline-flex items-center gap-2 rounded-lg border border-graphite/20 px-4 py-2 text-sm font-semibold text-graphite transition hover:border-graphite/40 hover:text-ink focus:outline-none focus:ring-2 focus:ring-graphite/30 dark:border-fog/30 dark:text-fog dark:hover:border-fog/60 dark:hover:text-white dark:focus:ring-fog/30"
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  (() => {
    const dayOptions = [
      { value: 1, label: 'Monday' },
      { value: 2, label: 'Tuesday' },
      { value: 3, label: 'Wednesday' },
      { value: 4, label: 'Thursday' },
      { value: 5, label: 'Friday' },
      { value: 6, label: 'Saturday' },
      { value: 7, label: 'Sunday' },
    ];

    const periodWeeks = {
      weekly: 1,
      'bi-weekly': 2,
      monthly: 4,
    };

    const setupPlanForm = (form) => {
      if (!form || form.dataset.planFormInitialized === 'true') {
        return;
      }

      const container = form.querySelector('[data-plan-assignments]');
      const addBtn = form.querySelector('[data-action="add-assignment"]');
      const periodSelect = form.querySelector('select[name="period"]');
      const workouts = (() => {
        try {
          return JSON.parse(form.dataset.workouts || '[]') || [];
        } catch (_error) {
          return [];
        }
      })();
      const initialAssignments = (() => {
        try {
          return JSON.parse(form.dataset.initialAssignments || '[]') || [];
        } catch (_error) {
          return [];
        }
      })();

      const removeRow = (row) => {
        if (!row) {
          return;
        }
        row.remove();
        updatePositions();
        ensureAtLeastOneRow();
      };

      const updatePositions = () => {
        const rows = Array.from(container.querySelectorAll('[data-plan-row]'));
        rows.forEach((row, index) => {
          const positionInput = row.querySelector('[data-role="assignment-position"]');
          if (positionInput) {
            positionInput.value = String(index + 1);
          }
        });
      };

      const getMaxWeeks = () => {
        const period = periodSelect ? periodSelect.value : 'weekly';
        return periodWeeks[period] || 1;
      };

      const buildWeekSelect = (value = 1) => {
        const select = document.createElement('select');
        select.name = 'assignment_week[]';
        select.className = 'w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog';

        const max = getMaxWeeks();
        for (let index = 1; index <= max; index += 1) {
          const option = document.createElement('option');
          option.value = String(index);
          option.textContent = `Week ${index}`;
          if (index === value) {
            option.selected = true;
          }
          select.appendChild(option);
        }

        return select;
      };

      const buildDaySelect = (value = 1) => {
        const select = document.createElement('select');
        select.name = 'assignment_day[]';
        select.className = 'w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog';

        dayOptions.forEach((day) => {
          const option = document.createElement('option');
          option.value = String(day.value);
          option.textContent = day.label;
          if (day.value === value) {
            option.selected = true;
          }
          select.appendChild(option);
        });

        return select;
      };

      const buildWorkoutSelect = (value = '') => {
        const select = document.createElement('select');
        select.name = 'assignment_workout[]';
        select.className = 'w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog';

        const placeholder = document.createElement('option');
        placeholder.value = '';
        placeholder.textContent = 'Select workout…';
        placeholder.disabled = true;
        placeholder.selected = !value;
        select.appendChild(placeholder);

        workouts.forEach((workout) => {
          const option = document.createElement('option');
          option.value = String(workout.id);
          option.textContent = workout.name || `Workout ${workout.id}`;
          if (value && String(workout.id) === String(value)) {
            option.selected = true;
          }
          select.appendChild(option);
        });

        return select;
      };

      const createAssignmentRow = ({ week_index = 1, day_of_week = 1, workout_id = '' } = {}) => {
        const row = document.createElement('div');
        row.className = 'grid gap-3 md:grid-cols-[repeat(4,minmax(0,1fr))] items-end rounded-lg border border-graphite/10 bg-white p-3 shadow-sm dark:border-fog/15 dark:bg-graphite/80';
        row.dataset.planRow = 'true';

        const positionInput = document.createElement('input');
        positionInput.type = 'hidden';
        positionInput.name = 'assignment_position[]';
        positionInput.value = '0';
        positionInput.dataset.role = 'assignment-position';

        const weekWrapper = document.createElement('div');
        weekWrapper.className = 'flex flex-col gap-2';
        const weekLabel = document.createElement('label');
        weekLabel.className = 'text-xs font-semibold uppercase tracking-wide text-graphite/60 dark:text-fog/60';
        weekLabel.textContent = 'Week';
        const weekSelect = buildWeekSelect(week_index);
        weekWrapper.append(weekLabel, weekSelect);

        const dayWrapper = document.createElement('div');
        dayWrapper.className = 'flex flex-col gap-2';
        const dayLabel = document.createElement('label');
        dayLabel.className = 'text-xs font-semibold uppercase tracking-wide text-graphite/60 dark:text-fog/60';
        dayLabel.textContent = 'Day';
        const daySelect = buildDaySelect(day_of_week);
        dayWrapper.append(dayLabel, daySelect);

        const workoutWrapper = document.createElement('div');
        workoutWrapper.className = 'flex flex-col gap-2';
        const workoutLabel = document.createElement('label');
        workoutLabel.className = 'text-xs font-semibold uppercase tracking-wide text-graphite/60 dark:text-fog/60';
        workoutLabel.textContent = 'Workout';
        const workoutSelect = buildWorkoutSelect(workout_id);
        workoutWrapper.append(workoutLabel, workoutSelect);

        const removeWrapper = document.createElement('div');
        removeWrapper.className = 'flex justify-end md:justify-start';
        const removeButton = document.createElement('button');
        removeButton.type = 'button';
        removeButton.dataset.action = 'remove-assignment';
        removeButton.className = 'inline-flex items-center gap-2 rounded-lg border border-graphite/20 px-3 py-1.5 text-xs font-semibold uppercase tracking-wide text-graphite transition hover:border-graphite/40 hover:text-ink focus:outline-none focus:ring-2 focus:ring-graphite/30 dark:border-fog/30 dark:text-fog dark:hover:border-fog/60 dark:hover:text-white dark:focus:ring-fog/30';
        removeButton.textContent = 'Remove';
        removeWrapper.appendChild(removeButton);

        row.append(positionInput, weekWrapper, dayWrapper, workoutWrapper, removeWrapper);
        container.appendChild(row);

        removeButton.addEventListener('click', (event) => {
          event.preventDefault();
          removeRow(row);
        });

        updateWeekSelect(weekSelect);
        updatePositions();
      };

      const updateWeekSelect = (select) => {
        if (!select) {
          return;
        }

        const currentValue = Number.parseInt(select.value, 10);
        const max = getMaxWeeks();
        select.innerHTML = '';

        for (let index = 1; index <= max; index += 1) {
          const option = document.createElement('option');
          option.value = String(index);
          option.textContent = `Week ${index}`;
          if (index === currentValue) {
            option.selected = true;
          }
          select.appendChild(option);
        }

        if (Number.parseInt(select.value, 10) > max) {
          select.value = String(max);
        }
      };

      const updateAllWeekSelects = () => {
        const rows = Array.from(container.querySelectorAll('[data-plan-row] select[name="assignment_week[]"]'));
        rows.forEach(updateWeekSelect);
      };

      const ensureAtLeastOneRow = () => {
        if (!container.querySelector('[data-plan-row]')) {
          createAssignmentRow();
        }
      };

      if (Array.isArray(initialAssignments) && initialAssignments.length) {
        initialAssignments.forEach((assignment) => {
          createAssignmentRow({
            week_index: assignment.week_index,
            day_of_week: assignment.day_of_week,
            workout_id: assignment.workout_id || (assignment.workout && assignment.workout.id),
          });
        });
      } else {
        createAssignmentRow();
      }

      if (addBtn) {
        addBtn.addEventListener('click', (event) => {
          event.preventDefault();
          createAssignmentRow();
        });
      }

      if (periodSelect) {
        periodSelect.addEventListener('change', () => {
          updateAllWeekSelects();
        });
      }

      form.dataset.planFormInitialized = 'true';
    };

    const setupAllPlanForms = (root = document) => {
      root.querySelectorAll('[data-plan-form]').forEach((form) => {
        setupPlanForm(form);
      });
    };

    setupAllPlanForms(document);

    const newButton = document.getElementById('new-plan-button');
    const formContainer = document.getElementById('new-plan-form-container');
    const form = document.getElementById('new-plan-form');
    const cancelBtn = formContainer ? formContainer.querySelector('[data-action="cancel-plan"]') : null;
    const messages = document.getElementById('plan-form-messages');
    const modal = document.getElementById('plan-delete-modal');
    const modalForm = document.getElementById('plan-delete-form');
    const modalError = document.getElementById('plan-delete-error');
    const modalName = document.getElementById('plan-delete-name');
    const confirmDelete = modal ? modal.querySelector('[data-role="confirm-delete"]') : null;

    let deletePlanId = null;
    let deleteSourceButton = null;
    let deletePlanName = '';

    const showForm = () => {
      if (!newButton || !formContainer || !form || newButton.disabled) {
        return;
      }

      formContainer.classList.remove('hidden');
      formContainer.setAttribute('aria-hidden', 'false');
      newButton.classList.add('hidden');

      if (messages) {
        messages.innerHTML = '';
      }

      form.reset();
      form.dataset.initialAssignments = '[]';
      form.dataset.planFormInitialized = 'false';
      const container = form.querySelector('[data-plan-assignments]');
      if (container) {
        container.innerHTML = '';
      }
      setupAllPlanForms(form);

      window.requestAnimationFrame(() => {
        const focusTarget = form.querySelector('input[name="name"]');
        if (focusTarget) {
          focusTarget.focus();
        }
      });
    };

    const hideForm = ({ clearMessages = false } = {}) => {
      if (!formContainer || !form || !newButton) {
        return;
      }

      formContainer.classList.add('hidden');
      formContainer.setAttribute('aria-hidden', 'true');
      form.reset();
      form.dataset.initialAssignments = '[]';
      form.dataset.planFormInitialized = 'false';
      const container = form.querySelector('[data-plan-assignments]');
      if (container) {
        container.innerHTML = '';
      }

      if (clearMessages && messages) {
        messages.innerHTML = '';
      }

      newButton.classList.remove('hidden');
      newButton.focus();
    };

    const closeModal = () => {
      if (!modal) {
        return;
      }

      modal.classList.add('hidden');
      modal.setAttribute('aria-hidden', 'true');
      deletePlanId = null;
      deletePlanName = '';

      if (modalError) {
        modalError.classList.add('hidden');
        modalError.textContent = '';
      }

      if (modalName) {
        modalName.textContent = '';
      }

      if (confirmDelete) {
        confirmDelete.disabled = false;
        confirmDelete.removeAttribute('aria-busy');
      }

      if (deleteSourceButton && document.contains(deleteSourceButton)) {
        deleteSourceButton.focus();
      }

      deleteSourceButton = null;
    };

    const showModal = (planId, trigger) => {
      if (!modal || !confirmDelete || !modalForm || !planId) {
        return;
      }

      deletePlanId = planId;
      deleteSourceButton = trigger;
      deletePlanName = trigger?.getAttribute('data-plan-name') || '';
      modal.classList.remove('hidden');
      modal.setAttribute('aria-hidden', 'false');

      if (modalError) {
        modalError.classList.add('hidden');
        modalError.textContent = '';
      }

      if (modalName) {
        modalName.textContent = deletePlanName;
      }

      confirmDelete.focus();
    };

    if (newButton) {
      newButton.addEventListener('click', (event) => {
        event.preventDefault();
        showForm();
      });
    }

    document.addEventListener('plan-form:saved', () => {
      hideForm({ clearMessages: false });
    });

    if (cancelBtn) {
      cancelBtn.addEventListener('click', (event) => {
        event.preventDefault();
        hideForm({ clearMessages: true });
      });
    }

    document.addEventListener('click', (event) => {
      const deleteButton = event.target.closest('[data-action="delete-plan"]');
      if (deleteButton) {
        event.preventDefault();
        const planId = deleteButton.getAttribute('data-plan-id');
        if (planId) {
          showModal(planId, deleteButton);
        }
        return;
      }

      if (event.target.closest('[data-action="close-delete"]')) {
        event.preventDefault();
        closeModal();
      }
    });

    if (modal) {
      modal.addEventListener('click', (event) => {
        if (event.target === modal) {
          closeModal();
        }
      });

      modal.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
          event.preventDefault();
          closeModal();
        }
      });
    }

    if (modalForm && confirmDelete) {
      modalForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        if (!deletePlanId) {
          return;
        }

        confirmDelete.disabled = true;
        confirmDelete.setAttribute('aria-busy', 'true');

        if (modalError) {
          modalError.classList.add('hidden');
          modalError.textContent = '';
        }

        try {
          const response = await fetch(`/plans/${encodeURIComponent(deletePlanId)}`, {
            method: 'DELETE',
            headers: {
              'X-Requested-With': 'XMLHttpRequest',
            },
          });

          if (!response.ok) {
            throw new Error(`Delete failed with status ${response.status}`);
          }

          const card = document.getElementById(`plan-${deletePlanId}`);
          if (card) {
            card.remove();
          }

          if (messages) {
            const planName = deletePlanName || 'Plan';
            messages.innerHTML = `<p class="rounded-lg border border-teal/20 bg-teal/10 px-3 py-2 text-sm text-teal-dark dark:border-orange/40 dark:bg-orange/10 dark:text-orange">${escapeHtml(
              planName
            )} deleted.</p>`;
          }

          closeModal();
        } catch (_error) {
          if (modalError) {
            modalError.textContent = 'Unable to delete plan. Please try again.';
            modalError.classList.remove('hidden');
          }
        } finally {
          confirmDelete.disabled = false;
          confirmDelete.removeAttribute('aria-busy');
        }
      });
    }

    document.body.addEventListener('htmx:afterSwap', (event) => {
      setupAllPlanForms(event.target);
    });
  })();
</script>
