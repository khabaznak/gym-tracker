{{> header title="Manage Exercises" subtitle="Build the exercise library that powers your workouts."}}

<main class="mx-auto mt-10 flex w-full max-w-5xl flex-col gap-8 px-6 pb-16">
  <section class="rounded-xl bg-white p-6 shadow-lg ring-1 ring-graphite/10 dark:bg-graphite dark:text-fog dark:ring-graphite/40">
    <div class="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
      <div>
        <h2 class="text-lg font-semibold text-ink dark:text-white">Exercise library</h2>
        <p class="mt-1 text-sm text-graphite/70 dark:text-fog/70">Create the movements, target zones, and prescriptions your athletes will follow.</p>
      </div>
      <button
        type="button"
        id="new-exercise-button"
        class="inline-flex items-center gap-2 rounded-lg bg-teal px-4 py-2 text-sm font-semibold text-white shadow-sm transition hover:bg-teal-dark focus:outline-none focus:ring-2 focus:ring-teal/40 disabled:cursor-not-allowed disabled:opacity-60 dark:bg-orange dark:hover:bg-orange-dark dark:focus:ring-orange/40"
        {{#unless supabaseReady}}disabled aria-disabled="true"{{/unless}}
      >
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" class="h-5 w-5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
        </svg>
        New exercise
      </button>
    </div>

    <div class="mt-6 grid gap-4 lg:grid-cols-2">
      <article class="rounded-lg border border-graphite/10 bg-fog p-4 text-sm text-graphite/80 dark:border-fog/15 dark:bg-graphite/60 dark:text-fog/80">
        <h3 class="text-base font-semibold text-ink dark:text-white">Target muscles</h3>
        <p class="mt-2 leading-relaxed">Define the muscle group or specific heads worked by the movement so training blocks stay intentional.</p>
      </article>
      <article class="rounded-lg border border-graphite/10 bg-fog p-4 text-sm text-graphite/80 dark:border-fog/15 dark:bg-graphite/60 dark:text-fog/80">
        <h3 class="text-base font-semibold text-ink dark:text-white">Prescription details</h3>
        <p class="mt-2 leading-relaxed">Capture sets, repetitions, technique cues, tempo, and equipment. Athletes get clarity, coaches get consistency.</p>
      </article>
    </div>

    <div id="exercise-form-messages" class="mt-6 text-sm text-graphite/70 dark:text-fog/70" role="status"></div>

    <div id="new-exercise-form-container" class="mt-6 hidden" aria-hidden="true">
      <form
        id="new-exercise-form"
        class="space-y-4 rounded-lg border border-graphite/10 bg-fog/60 p-4 shadow-sm dark:border-fog/15 dark:bg-graphite/60"
        hx-post="/exercises"
        hx-target="#exercise-form-messages"
        hx-swap="innerHTML"
        hx-on="htmx:afterSwap: if (event.detail.xhr.status === 201) { this.reset(); document.dispatchEvent(new CustomEvent('exercise-form:saved')); }"
      >
      <fieldset class="grid gap-4 md:grid-cols-2" {{#unless supabaseReady}}disabled{{/unless}}>
        <div class="flex flex-col gap-2">
          <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="exercise-name">Exercise name<span class="text-orange">*</span></label>
          <input
            id="exercise-name"
            name="name"
            type="text"
            placeholder="Barbell back squat"
            required
            class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:placeholder:text-fog/50 dark:focus:border-teal dark:focus:ring-teal/40"
          />
        </div>
        <div class="flex flex-col gap-2">
          <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="exercise-category">Category</label>
          <input
            id="exercise-category"
            name="category"
            type="text"
            placeholder="Strength"
            class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:placeholder:text-fog/50 dark:focus:border-teal dark:focus:ring-teal/40"
          />
        </div>
        <div class="flex flex-col gap-2">
          <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="target-muscle">Target muscle<span class="text-orange">*</span></label>
          <input
            id="target-muscle"
            name="target_muscle"
            type="text"
            placeholder="Quadriceps"
            required
            class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:placeholder:text-fog/50 dark:focus:border-teal dark:focus:ring-teal/40"
          />
        </div>
        <div class="flex flex-col gap-2">
          <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="target-sets">Target sets<span class="text-orange">*</span></label>
          <input
            id="target-sets"
            name="target_sets"
            type="number"
            min="1"
            step="1"
            placeholder="4"
            required
            class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:placeholder:text-fog/50 dark:focus:border-teal dark:focus:ring-teal/40"
          />
        </div>
        <div class="flex flex-col gap-2">
          <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="primary-muscle">Primary muscle (optional)</label>
          <input
            id="primary-muscle"
            name="primary_muscle"
            type="text"
            placeholder="Anterior chain"
            class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:placeholder:text-fog/50 dark:focus:border-teal dark:focus:ring-teal/40"
          />
        </div>
        <div class="flex flex-col gap-2">
          <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="secondary-muscles">Secondary muscles</label>
          <input
            id="secondary-muscles"
            name="secondary_muscles"
            type="text"
            placeholder="Glutes, core"
            class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:placeholder:text-fog/50 dark:focus:border-teal dark:focus:ring-teal/40"
          />
        </div>
        <div class="flex flex-col gap-2">
          <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="exercise-equipment">Equipment</label>
          <input
            id="exercise-equipment"
            name="equipment"
            type="text"
            placeholder="Rack, barbell"
            class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:placeholder:text-fog/50 dark:focus:border-teal dark:focus:ring-teal/40"
          />
        </div>
        <div class="flex flex-col gap-2">
          <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="exercise-tempo">Tempo</label>
          <input
            id="exercise-tempo"
            name="tempo"
            type="text"
            placeholder="3-1-1"
            class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:placeholder:text-fog/50 dark:focus:border-teal dark:focus:ring-teal/40"
          />
        </div>
        <div class="flex flex-col gap-2">
          <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="target-repetitions">Target repetitions<span class="text-orange">*</span></label>
          <input
            id="target-repetitions"
            name="target_repetitions"
            type="number"
            min="1"
            step="1"
            placeholder="12"
            required
            class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:placeholder:text-fog/50 dark:focus:border-teal dark:focus:ring-teal/40"
          />
        </div>
        <div class="flex flex-col gap-2">
          <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="exercise-video">Video link</label>
          <input
            id="exercise-video"
            name="video_url"
            type="url"
            placeholder="https://example.com/demo"
            class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:placeholder:text-fog/50 dark:focus:border-teal dark:focus:ring-teal/40"
          />
        </div>
        <div class="md:col-span-2 flex flex-col gap-2">
          <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="exercise-notes">Notes</label>
          <textarea
            id="exercise-notes"
            name="notes"
            rows="3"
            placeholder="Coach notes, regressions, loading targets."
            class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:placeholder:text-fog/50 dark:focus:border-teal dark:focus:ring-teal/40"
          ></textarea>
        </div>
        <div class="md:col-span-2 flex flex-col gap-2">
          <label class="text-sm font-medium text-graphite/80 dark:text-fog/80" for="exercise-cues">Cues</label>
          <textarea
            id="exercise-cues"
            name="cues"
            rows="2"
            placeholder="Drive knees out, keep chest tall."
            class="w-full rounded-lg border border-graphite/20 px-3 py-2 text-sm text-graphite shadow-sm focus:border-teal focus:outline-none focus:ring-2 focus:ring-teal/30 dark:border-fog/15 dark:bg-graphite dark:text-fog dark:placeholder:text-fog/50 dark:focus:border-teal dark:focus:ring-teal/40"
          ></textarea>
        </div>
      </fieldset>
        <div class="flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
          <div class="flex items-center gap-3">
            <button
              type="submit"
              class="inline-flex items-center gap-2 rounded-lg bg-teal px-4 py-2 text-sm font-semibold text-white shadow-sm transition hover:bg-teal-dark focus:outline-none focus:ring-2 focus:ring-teal/40 dark:bg-orange dark:hover:bg-orange-dark dark:focus:ring-orange/40"
              {{#unless supabaseReady}}disabled{{/unless}}
            >
              Save exercise
            </button>
            <button
              type="button"
              data-action="cancel-exercise"
              class="inline-flex items-center gap-2 rounded-lg border border-graphite/20 px-4 py-2 text-sm font-semibold text-graphite transition hover:border-graphite/40 hover:text-ink focus:outline-none focus:ring-2 focus:ring-graphite/30 dark:border-fog/30 dark:text-fog dark:hover:border-fog/60 dark:hover:text-white dark:focus:ring-fog/30"
            >
              Cancel
            </button>
            <span class="htmx-indicator text-sm text-graphite/70 dark:text-fog/70">Saving…</span>
          </div>
        </div>
      </form>
    </div>

    <div class="mt-8 space-y-3">
      <div class="flex items-center justify-between">
        <h3 class="text-sm font-semibold uppercase tracking-wide text-graphite/70 dark:text-fog/60">Exercise Library</h3>
        <button
          type="button"
          class="text-sm font-semibold text-teal hover:text-teal-dark dark:text-orange dark:hover:text-orange-dark"
          hx-get="/exercises/fragment"
          hx-target="#exercise-library"
          hx-swap="innerHTML"
          {{#unless supabaseReady}}disabled{{/unless}}
        >
          Refresh
        </button>
      </div>
      <div
        class="space-y-3"
        id="exercise-library"
        {{#if supabaseReady}}
          hx-get="/exercises/fragment"
          hx-trigger="load"
          hx-swap="innerHTML"
        {{/if}}
      >
        {{> exercises/list exercises=exercises supabaseReady=supabaseReady}}
      </div>
    </div>
  </section>

  <section class="rounded-xl border border-dashed border-graphite/20 bg-white/40 p-6 text-sm text-graphite/70 dark:border-fog/30 dark:bg-graphite/50 dark:text-fog/70">
    {{#if supabaseReady}}
      <p>Exercises you add here sync straight to Supabase. Extend the schema with advanced metadata, then surface it in cues, defaults, or workout builders.</p>
    {{else}}
      <p>Connect your Supabase project in <code class="rounded bg-graphite/10 px-1 py-0.5 text-xs text-graphite dark:bg-ink dark:text-fog">.env</code> to begin managing your exercise library from this dashboard.</p>
    {{/if}}
  </section>
</main>

<div
  id="exercise-delete-modal"
  class="fixed inset-0 z-50 hidden flex items-center justify-center bg-black/50 px-4 py-6"
  role="dialog"
  aria-modal="true"
  aria-labelledby="exercise-delete-title"
  aria-hidden="true"
>
  <div class="w-full max-w-md rounded-xl bg-white p-6 shadow-2xl ring-1 ring-black/10 dark:bg-graphite dark:text-fog dark:ring-white/10">
    <div class="space-y-4">
      <header class="space-y-2">
        <h2 id="exercise-delete-title" class="text-lg font-semibold text-ink dark:text-white">Delete exercise</h2>
        <p class="text-sm text-graphite/80 dark:text-fog/80">
          You're about to delete this exercise. This has no undo. Please confirm you want to delete this exercise.
        </p>
        <p id="exercise-delete-name" class="text-sm font-semibold text-ink dark:text-white"></p>
      </header>
      <div
        id="exercise-delete-error"
        class="hidden rounded-lg border border-red-200 bg-red-50 p-3 text-sm text-red-700 dark:border-orange/40 dark:bg-orange/10 dark:text-orange"
        role="alert"
      ></div>
      <form id="exercise-delete-form" class="flex flex-col gap-3">
        <div class="flex flex-wrap justify-end gap-3">
          <button
            type="submit"
            data-role="confirm-delete"
            class="inline-flex items-center gap-2 rounded-lg border border-red-300 px-4 py-2 text-sm font-semibold text-red-600 transition hover:border-red-400 hover:text-red-700 focus:outline-none focus:ring-2 focus:ring-red-200 disabled:cursor-not-allowed disabled:opacity-60 dark:border-orange/50 dark:text-orange dark:hover:border-orange dark:hover:text-orange/80 dark:focus:ring-orange/40"
          >
            Confirm delete
          </button>
          <button
            type="button"
            data-action="close-delete"
            class="inline-flex items-center gap-2 rounded-lg border border-graphite/20 px-4 py-2 text-sm font-semibold text-graphite transition hover:border-graphite/40 hover:text-ink focus:outline-none focus:ring-2 focus:ring-graphite/30 dark:border-fog/30 dark:text-fog dark:hover:border-fog/60 dark:hover:text-white dark:focus:ring-fog/30"
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  (() => {
    const trigger = document.getElementById('new-exercise-button');
    const container = document.getElementById('new-exercise-form-container');
    const form = document.getElementById('new-exercise-form');
    const cancel = container ? container.querySelector('[data-action="cancel-exercise"]') : null;
    const messages = document.getElementById('exercise-form-messages');
    const deleteModal = document.getElementById('exercise-delete-modal');
    const deleteForm = document.getElementById('exercise-delete-form');
    const deleteError = document.getElementById('exercise-delete-error');
    const deleteName = document.getElementById('exercise-delete-name');
    const confirmDelete = deleteModal ? deleteModal.querySelector('[data-role="confirm-delete"]') : null;

    let deleteTargetId = null;
    let deleteTriggerButton = null;
    let deleteTargetName = '';

    if (!trigger || !container || !form) {
      return;
    }

    const escapeHtml = (value = '') =>
      value
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');

    const showForm = () => {
      if (trigger.disabled) {
        return;
      }

      container.classList.remove('hidden');
      container.setAttribute('aria-hidden', 'false');
      trigger.classList.add('hidden');

      if (messages) {
        messages.innerHTML = '';
      }

      window.requestAnimationFrame(() => {
        const focusTarget = form.querySelector('input[name="name"]');
        if (focusTarget) {
          focusTarget.focus();
        }
      });
    };

    const hideForm = ({ clearMessages = false } = {}) => {
      container.classList.add('hidden');
      container.setAttribute('aria-hidden', 'true');
      form.reset();

      if (clearMessages && messages) {
        messages.innerHTML = '';
      }

      trigger.classList.remove('hidden');
      trigger.focus();
    };

    trigger.addEventListener('click', (event) => {
      event.preventDefault();
      showForm();
    });

    document.addEventListener('exercise-form:saved', () => {
      hideForm({ clearMessages: false });
    });

    if (cancel) {
      cancel.addEventListener('click', (event) => {
        event.preventDefault();
        hideForm({ clearMessages: true });
      });
    }

    const closeDeleteModal = () => {
      if (!deleteModal) {
        return;
      }

      deleteModal.classList.add('hidden');
      deleteModal.setAttribute('aria-hidden', 'true');
      deleteTargetId = null;
      deleteTargetName = '';

      if (deleteError) {
        deleteError.classList.add('hidden');
        deleteError.textContent = '';
      }

      if (deleteName) {
        deleteName.textContent = '';
      }

      if (confirmDelete) {
        confirmDelete.disabled = false;
        confirmDelete.removeAttribute('aria-busy');
      }

      if (deleteTriggerButton && document.contains(deleteTriggerButton)) {
        deleteTriggerButton.focus();
      }

      deleteTriggerButton = null;
    };

    const showDeleteModal = (exerciseId, triggerButton) => {
      if (!deleteModal || !confirmDelete || !deleteForm || !exerciseId) {
        return;
      }

      deleteTargetId = exerciseId;
      deleteTriggerButton = triggerButton;
      deleteTargetName = triggerButton?.getAttribute('data-exercise-name') || '';
      deleteModal.classList.remove('hidden');
      deleteModal.setAttribute('aria-hidden', 'false');
      if (deleteError) {
        deleteError.classList.add('hidden');
        deleteError.textContent = '';
      }
      if (deleteName) {
        deleteName.textContent = deleteTargetName;
      }
      confirmDelete.focus();
    };

    document.addEventListener('click', (event) => {
      const deleteButton = event.target.closest('[data-action="exercise-delete"]');
      if (deleteButton) {
        event.preventDefault();
        const id = deleteButton.getAttribute('data-exercise-id');
        if (id) {
          showDeleteModal(id, deleteButton);
        }
        return;
      }

      if (event.target.closest('[data-action="close-delete"]')) {
        event.preventDefault();
        closeDeleteModal();
      }
    });

    if (deleteModal) {
      deleteModal.addEventListener('click', (event) => {
        if (event.target === deleteModal) {
          closeDeleteModal();
        }
      });
    }

    if (deleteForm && confirmDelete) {
      deleteForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        if (!deleteTargetId) {
          return;
        }

        confirmDelete.disabled = true;
        confirmDelete.setAttribute('aria-busy', 'true');
        if (deleteError) {
          deleteError.classList.add('hidden');
          deleteError.textContent = '';
        }

        try {
          const response = await fetch(`/exercises/${encodeURIComponent(deleteTargetId)}`, {
            method: 'DELETE',
            headers: {
              'X-Requested-With': 'XMLHttpRequest',
            },
          });

          if (!response.ok) {
            throw new Error(`Delete failed with status ${response.status}`);
          }

          const card = document.getElementById(`exercise-${deleteTargetId}`);
          if (card) {
            card.remove();
          }

          if (messages) {
            messages.innerHTML =
              `<p class="rounded-lg border border-teal/20 bg-teal/10 px-3 py-2 text-sm text-teal-dark dark:border-orange/40 dark:bg-orange/10 dark:text-orange">${escapeHtml(
                deleteTargetName || 'Exercise'
              )} deleted.</p>`;
          }

          closeDeleteModal();
        } catch (error) {
          if (deleteError) {
            deleteError.textContent = 'Unable to delete exercise. Please try again.';
            deleteError.classList.remove('hidden');
          }
        } finally {
          confirmDelete.disabled = false;
          confirmDelete.removeAttribute('aria-busy');
        }
      });

      deleteModal?.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
          event.preventDefault();
          closeDeleteModal();
        }
      });
    }
  })();
</script>
